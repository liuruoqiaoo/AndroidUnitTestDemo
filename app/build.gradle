apply plugin: 'com.android.application'
apply plugin: 'jacoco'
apply plugin: 'findbugs'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.youmi.adn.liuruoqiao.androidtestdemo"
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true

        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.guava:guava:18.0'
    compile 'com.android.support:appcompat-v7:23.2.1'
    compile 'com.android.support:design:23.2.1'
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.9.5"
    androidTestCompile 'com.android.support:support-annotations:23.2.1'
    androidTestCompile 'com.android.support.test:runner:0.4.1'
    androidTestCompile 'com.android.support.test:rules:0.4.1'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'


}

jacoco{
    toolVersion = "0.7.4.201502262128"
}

//自定义一个jacoco的task，这个是依赖于connectedAndroidTest，所以执行之前会执行connectedAndroidTest
task jacocoTestReport(type:JacocoReport){
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports{
        xml.enabled = false
        html.enabled = true
        csv.enabled = false
    }
    classDirectories = fileTree(
            dir : "$buildDir/intermediates/classes/debug",
            excludes : [
                    '***/*//*Test*.class',
                    '***/*//*ByEspreso.class',
                    '**//*R.class',
                    '**//*R$*.class',
                    '**//*BuildConfig.*',
                    '**//*Manifest*.*'
            ]
    )
    def coverageSourceDirs = ['src/main/java']
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    additionalClassDirs = files(coverageSourceDirs)
    executionData = files("$buildDir/outputs/code-coverage/connected/coverage.ec")
}
task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "default"
    reportLevel = "medium"
    //过滤器
   excludeFilter = new File("${project.rootDir}/findbug_filter.xml")
    //这里填写项目classes目录
    classes = files("${project.rootDir}/app/build/intermediates/classes")
    source = fileTree('src/main/java')
    classpath = files()
    reports {
        //只能开启一个
        xml.enabled = true
        html.enabled = false
    }
}